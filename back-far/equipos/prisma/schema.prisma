// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Equipo {
  id               Int       @id @default(autoincrement())
  etiquetaActivo   String    @unique
  numeroSerie      String    @unique
  modelo           String
  estado           String
  ubicacion        String
  tipoMantenimiento String
  fechaCompra      DateTime
  fechaInicioUso DateTime?
  proveedor        String
  numeroOrden      String
  tipoEquipo       String?
  fotoUrl1         String?
  fotoUrl2         String?
  fotoUrl3         String?
  fotoUrl4         String?
  documentoUrl1    String?
  documentoUrl2    String?
  documentoUrl3    String?
  documentoUrl4    String?
  ultimoMantenimiento    DateTime? // Fecha del Ãºltimo mantenimiento
  proximoMantenimiento   DateTime? // Fecha predicha
  horasUsoAcumuladas     Int       @default(0)
  historialMantenimientos HistorialMantenimiento[]

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  userId           Int       @default(1) 
  nombreUsuario    String?
  periodoMantenimiento Int?
  componentes      ComponenteEquipo[]
  imagenes         ImagenEquipo[]
  documentos       DocumentoEquipo[]
}

model HistorialMantenimiento {
  id          Int       @id @default(autoincrement())
  equipo      Equipo    @relation(fields: [equipoId], references: [id])
  equipoId    Int
  fechaInicio DateTime
  fechaFin    DateTime
  tipo        String    // "Preventivo", "Correctivo", "Predictivo"
  descripcion String?
  horasUso    Int       // Horas de uso del equipo hasta ese momento
  tecnicoId   Int
  tecnicoNombre String
  createdAt   DateTime  @default(now())
}

model ComponenteEquipo {
  id         Int     @id @default(autoincrement())
  nombre     String
  equipoId   Int
  equipo     Equipo  @relation(fields: [equipoId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model ImagenEquipo {
  id         Int     @id @default(autoincrement())
  url        String
  file       String? // Representa el archivo que se sube si no es una imagen existente
  isExisting Boolean
  equipoId   Int
  equipo     Equipo  @relation(fields: [equipoId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model DocumentoEquipo {
  id         Int     @id @default(autoincrement())
  name       String
  file       String? // Representa el archivo que se sube si no es un documento existente
  type       String
  isExisting Boolean
  equipoId   Int
  equipo     Equipo  @relation(fields: [equipoId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}
